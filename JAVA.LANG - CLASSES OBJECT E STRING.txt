O PACOTE JAVA.LANG - CLASSES OBJECT E STRING

STRING

String e System são classes. Falamos anteriormente que todas as classes estão dentro de um pacote, mas como lidamos com essas duas? Devemos utiliza-las a partir de um import, como com todas as outras classes, certo?

As classes String e System estão, sim, dentro de um pacote, mas não é necessário importa-las. O único pacote que não necessita ser importado é java.lang. Por ser de suma importância para o desenvolvimento de qualquer aplicação Java, ele é incluído automaticamente.

1 - As classes String e System vem desse pacote.
2 - Não precisa do import, é automaticamente importado.
3 - Possui classes essenciais para qualquer programa.

Quando falamos sobre exceções já vimos várias classes como Exception, RuntimeException, NullPointerException ou ArithmeticException.

Todas essas classes vem do pacote java.lang e por isso não era preciso importá-las.

CLASSE STRING E A IMUTABILIDADE

Strings também são objetos. No entanto, não é preciso utilizar o new para criar este objeto. Isso ocorre para facilitar a vida do desenvolvedor, não precisamos utilizar o *new* todas as vezes que formos trabalhar com Strings, mas nada impede que você o faça. Portanto, as duas formas são funcionais, embora o *segundo caso* seja considerado uma má prática. A partir da primeira forma a máquina virtual consegue executar algumas otimizações, o que é impossível no segundo caso.

 Criação de objetos usando a classe String 

1º Caso: Objeto Literal

String nome = "Alura"; 
Classe referência = objeto

2º Caso:

String outro = new String("Alura");

Chamamos essa sintaxe de *objeto literal*. Na sintaxe não há diferença entre inicializar um inteiro(int) e uma String. nome é uma referência, então nada nos impede de executar métodos em cima dela. 

CONCEITO FUNDAMENTAL DA STRING:

 String nome = "Alura";

Uma vez que foi criada, ela não poderá ser modificada posteriormente. Chamamos o conceito de um objeto não poder ser alterado de IMUTABILIDADE. 
Caso você queira alterar algo em uma String, você terá de criar uma String que refletirá uma nova ação, ou seja, teremos dois objetos, como duas "Aluras", sendo uma com "A" e outra com "a".

Se quisermos imprimir alura, deveremos criar uma String que chamaremos de outra, e que apontará para o objeto de nosso interesse.


public String replace(char oldChar, char newChar) = replace() retorna uma String.


String outra = nome.replace("A", "a");

Na verdade, temos duas String na memória, sendo uma nome que aponta para o objeto Alura e a String outra que aponta para um novo objeto, no caso, alura.

Todos os métodos funcionam nessa linha: devolvem uma nova String, respeitando o conceito de imutabilidade. Esse é um conceito importante e algumas classes do nosso projeto seguem essa ideia.

Nem todas classes são imutáveis, a nossa classe Conta não é imutável, afinal a ideia de uma conta é necessariamente dinâmica, o saldo de uma conta está sempre em movimento e transformação.

SOBRE STRING:

1 - É uma classe definida em java.lang e por isso não há a necessidade de importar. Pois a classe String realmente é do pacote java.lang. O FQN é java.lang.String

2 - Um objeto do tipo String não pode ser alterado. Objetos da classe String são imutáveis. Isso significa que, uma vez criado, não pode ser alterado, por isso qualquer alteração cria um novo objeto String.

3 - Pode ser criada tanto usando new quanto aspas duplas e há diferenças em relação a isso. Pois existe sim uma diferença entre a criação com new e a criação com aspas duplas. Usar aspas duplas é boa prática pois a JVM pode executar várias otimizações por baixo dos panos.

4 - Serve para definirmos textos e não precisa ser criadas usando a palavra new, pois Strings podem e devem ser criados usando aspas duplas, como boas práticas:
		String nome = "alura";

MÉTODOS DA CLASSE STRING


Sobrecarga:

	Existem duas versões do método replace(), e os dois variam nos parâmetros, ambos recebem dois, mas os tipos são diferentes. O conceito de métodos que variam nos tipos de parâmetros é chamado de sobrecarga, muito comum no mundo Java.
	
replace() = recebe CharSequence e outro um char; o primeiro está relacionado a conversão de um conjunto de caracteres.

			String outra = nome.replace("Al", "aL");

A outra opção altera apenas um caractere. É importante lembrar que no mundo Java um único caractere é acompanhado de aspas simples.

			String outra = nome.replace('A', 'a');

Esse tipo é chamado char, ou seja, uma String que contém apenas um caractere. Observem um exemplo ainda mais claro:

			char c = 'A'
			char d = 'a'

			String outra = nome.replace(c,d);

+ charAt( ) = saber qual é o caractere que ocupa uma posição específica.

String nome = "Alura";

char c = nome.charAt(2);

System.out.println(c); // u

Percebam que o resultado impresso foi a letra u, o que pode parecer um pouco estranho, uma vez que a segunda letra da String Alura seria l. Por que isso ocorreu? O Java, como quase todas as linguagens, trabalha com o numeral inicial "0".

A = 0
L = 1
U = 2
R = 3
A = 4

+ indexOf( ) = Esse método possui muitas variantes, recebendo diferentes parâmetros. Usaremos o método que recebe uma String. Para o método podemos passar uma sequencia de caracteres, passaremos ur. Assim feito, podemos perguntar qual é a posição dessa String dentro de Alura.

String nome = "Alura";

int pos = nome.indexOf("ur");

System.out.println(pos); // 2

O método indexOf() opera de forma inversa ao charAt(), uma vez que aquele com base no caractere exibe sua posição, e este utiliza a posição para exibir o caractere.

+ substring() = Existe um método que possibilita a criação de uma sub-String. Este método possui duas sobrecargas. A primeira informação que vamos fornecer é a partir de que posição iniciamos a contagem; colocaremos 1.

String nome = "Alura";

String sub = nome.substring(1);

System.out.println(sub); // lura

+length( ) = Saber qual é o tamanho de uma determinada String.

String nome = "Alura";

System.out.println(nome.length()); // 5

Com isso, podemos criar um laço, iniciando por 0, e imprimirmos caractere por caractere utilizando o método charAt().

String nome = "Alura";
System.out.println(nome.length());

for(int i = 0; i < nome.length(); i++) {
    System.out.println(nome.charAt(i));
}

Resultado:

5
A
l
u
r
a

+ isEmpty() = perguntar se a String está vazia. Recebe um retorno booleano (true e false);
Para testarmos esse método criaremos uma Stringvazia; lembrando que esse objeto existe, apenas não possui nenhum caractere, em uma situação real para exemplificarmos: umaString` vazia pode representar um campo de formulário que não foi preenchido pelo usuário.

String vazio = "";

System.out.println(vazio.isEmpty()); // true

Se inserirmos um espaço na String, do ponto de vista do Java, não teremos mais uma String vazia, e o resultado será false.

+ trim() = método para anular todos os espaços em uma String. 
ele devolve uma nova apresentação, que chamaremos de outroVazio.

String vazio =" ";
String outroVazio = vazio.trim(); 

System.out.println(outroVazio.isEmpty()); // true 

Removemos todos os espaços e temos efetivamente uma String vazia.

Para deixarmos mais claro como o método trim() opera, iremos escrever Alura em String vazio e adiconaremos muitos espaços extras, tanto no começo como ao final da palavra.

String vazio ="    Alura    ";
String outroVazio = vazio.trim(); 

System.out.println(outroVazio); alura

- no canto do console sem os espaçamentos na String vazio.

+ contains( ) = Este método verifica se uma String possui uma sub-String. Perguntaremos se a String vazio possui uma sub-String Alu. Devolve um valor booleano.

String vazio ="    Alura    ";
String outroVazio = vazio.trim(); 

System.out.println(vazio.contains("Alu")); // true

 









