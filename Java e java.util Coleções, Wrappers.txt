Java e java.util: Coleções, Wrappers e Lambda expressions

Estruturas de dados: Precisamos de formas mais enxutas de armazenamento de dados, e para isso existem as estruturas de dados.

1ª Arrays [ ]:

 - Utiliza conchetes para utilizar arrays:
		Tipo de dado[ ] - Ex: String[]

- Arrays são objetos:
		 int [] idades = new int [5];

- Arrays começam com 0 (zero);

Internamente, temos um processo que começa com uma pilha de execução, representada pelo método main. Nesta pilha, ou seja, no método, foi criada uma variável idades.

Esta variável é um array, que como vimos, é um objeto. Os objetos ficam armazenados na memória HEAP. Assim, idades é uma referência que aponta para um objeto na memória, capaz de guardar cinco idades.

Utilizamos a variável como referência e precisamos informar a posição que queremos acessar dentro de colchetes ([]). Por exemplo, se quisermos acessar a primeira posição, ela é representada pelo número 0:

		idades[0]

Incializando um array (inserindo dados):
 
		 idades[0] = 29;

	int idade1 = idades[0];

Um array é:

1 - Array é uma estrutura de dados.

2 - Um array é sempre inicializado com os valores padrões. cada posição do array é inicializada com o valor padrão. Qual é esse valor padrão? O tipo do array define. Por exemplo, no array do tipo int o valor padrão é 0, no double o valor padrão é 0.0.

3 - Um array é sempre zero-based (o primeiro elemento se encontra no index 0).

A SINTAXE DO ARRAY

Definimos o tamanho na hora de criar o array.

	double[] precos = new double[5];

ARRAY DE REFERÊNCIA

Sintaxe:

		ContaCorrente[] contas = new ContaCorrente[5];

Padrão de referência de um array de referência  é NULL

FORMA LITERAL

Até agora vimos a forma "classica" de criar um objeto array usando a palavra chave new, por exemplo:

			int[] numeros = new int[5];

numeros[0] = 1;
numeros[1] = 2;
numeros[2] = 3;
numeros[3] = 4;
numeros[4] = 5;

Usar valores diretamente, menos burocrático, mais direito.

			int[] refs = {1,2,3,4,5};

Usamos as chaves {} para indicar que se trata de um array e os valores já ficam declarados dentro das chaves.

RESUMO:

- Um array é uma estrutura de dados e serve para guardar elementos (valores primitivos ou referências);

- Arrays usam colchetes ([]) sintaticamente;

- Arrays têm um tamanho fixo!

- Um array também é um objeto!;

- Arrays são zero-based (o primeiro elemento se encontra na posição 0);

- Um array é sempre inicializado com os valores padrões;

- Ao acessar uma posição inválida recebemos a exceção ArrayIndexOutOfBoundException;

- Arrays possuem um atributo length para saber o tamanho
A forma literal de criar uma Array, com o uso de chaves {}.


CAP 2: GUARDANDO QUALQUER REFERÊNCIA

Array do tipo OBJECT

Conta[] contas2 = new Conta[5]; - Contas do nível mais genérico 

Type cast 

transforma a ref tipo (génerica) conta para um ref (mais especifica) tipo conta popança.

			 ContaPoupanca ref = (ContaPoupanca) contas[1];

Array que guarda qualquer tipo de dados:

	Object [ ] banco = new Object [5];	

CAST IMPLÍCITO E EXPLÍCITO DE PRIMITIVOS

o primeiro do mundo de primitivos:

int numero = 3;
double valor = numero; //cast implícito

Repare que colocamos um valor da variável numero (tipo int) na variável valor (tipo double), sem usar um cast explícito. Isso funciona? A resposta é sim, pois qualquer inteiro cabe dentro de um double. Por isso o compilador fica quieto e não exige um cast explicito, mas nada impede de escrever:

	int numero = 3;
	double valor = (double) numero; //cast explícito


Agora, o contrário não funciona sem cast, uma vez que um double NÃO cabe em um int:

		double valor = 3.56;
		int numero = (int) valor; //cast explicito é exigido pelo compilador

Nesse caso o compilador joga todo valor fracional fora e guarda apenas o valor inteiro.

	CAST IMPLÍCITO E EXPLÍCITO DE REFERÊNCIAS

*Nas referências, o mesmo princípio se aplica. Se o cast sempre funciona não é necessário deixá-lo explícito*

		ContaCorrente cc1 = new ContaCorrente(22, 33);
		Conta conta = cc1; //cast implicito 

Aqui também poderia ser explícito, mas novamente, o compilador não exige pois qualquer ContaCorrente é uma Conta:

		ContaCorrente cc1 = new ContaCorrente(22, 33);
		Conta conta = (Conta) cc1; //cast explícito mas desnecessário 

TYPE CAST EXPLÍCITO SEMPRE FUNCIONA?

A resposta é NÃO. O cast explicito só funciona se ele for possível, mas há casos em que o compilador sabe que um cast é impossível e aí nem compila, nem com type cast.

		Cliente cliente = new Cliente();
		Conta conta = (Conta) cliente; //impossível, não compila


Como o cliente não ESTENDE a classe Conta ou IMPLEMENTA uma INTERFACE do tipo Conta, é impossível esse cast funcionar, pois uma referência do tipo Conta jamais pode apontar para um objeto do tipo Cliente.

A certificação Java tem muitas dessas perguntas sobre cast possível, impossível, explícito e implícito. Se você pretende tirar essa certificação, vale a pena estudar esse assunto com muita calma.git init

EXEÇÕES DO TYPE CAST

SOBRE ClassCastException

1 - é do pacote java.lang
2 - É lançada quando o type cast falha
3 - A ClassCastException é unchecked pois estende RuntimeException.

ENTENDENDO O ARRAY STRING ARGS

Acessa pelo terminal cmd 
1 - ls = saber onde está a pasta (está dentro da pasta bin)
2 - cd bin = acessar a pasta bin
3 - ls = mostra a pasta
4 - java joga o caminho da pasta = inicializa a maquina virtual
5 - Já está funcionando no terminal
6 - pode passar parametros e coloca dentro da String acessada pelo terminal


Strings [ ] = Ele existe para que possamos passar parâmetros a partir do terminal


Assim, temos uma forma de interagir com o programa Java a partir da linha de comando. Chamamos a aplicação e, simultaneamente, é possível definirmos parâmetros.

Isso tem várias utilidades. Pode servir, por exemplo, para habilitar alguma funcionalidade, entre várias outras configurações possíveis.

RESUMO:

# uma array do tipo Object pode guardar qualquer tipo de referência;

# quando convertemos uma referência genérica para uma referência mais específica é preciso usar um type cast;

# o cast só compila quando é possível, mesmo assim pode falhar na hora de rodar;

# quando o type cast falha podemos receber uma ClassCastException;

# para receber valores ao chamar o programa Java na linha de comando podemos usar o array String[] no método main;

ARRAYLIST E GENERICS

	Adapter para Arrays

Desvantagens de usar Array:

1 - Sintaxe fora do padrão "OO Java". Os arrays realmente têm a sua própria sintaxe, o que dificulta a legibilidade do código.

2 - Array tem um tamanho fixo (não pode crescer dinamicamente). Uma vez criado, o array sempre terá o mesmo tamanho de elementos. Isso é muito ruim quando não sabemos exatamente quantos elementos precisamos guardar.

3 - Array não sabe quantas posições estão ocupadas (apenas tamanho total). Isso é uma grande desvantagem. Não queremos saber quantos elementos um array pode ter, mas sim quantos elementos realmente já existem no array.

4 - Array é uma estrutura considerada rápida. Pensando no desempenho o array é a estrutura que se destaca.

		ArrayList

O pacote fundamental do java: JAVA.UTIL

Sobre o ArrayList:

a) Guarda referências.

b) É do pacote java.util.

c) Usa internamente um array.

d) Ao inicializar NÃO é preciso definir o tamanho

O java.util.ArrayList é realmente um guardador de referências e usa um array internamente.Correto, o java.util.ArrayList é realmente um guardador de referências e usa um array internamente.

Adicionando referências no ArrayList o elemento é adicionado no fim da lista.

Elementos que o ArrayList pode guardar o limite é a memória da JVM. O único limite é a memória da JVM.

Lados bons e ruins do ArrayList:

Positivos:

1 - temos as características de um array, ou seja, o acesso fácil a qualquer elemento aleatório. Se adicionamos elementos em um array, e queremos acessar qualquer posição, não há nenhum trabalho a mais para que façamos isso, esse acesso pode ser feito diretamente pelo índice de forma bastante facilitada.

2 -  adicionar novos elementos em um array é um processo simples, desde que não seja ultrapassada sua capacidade de armazenamento. Se desejarmos adicionar um novo elemento, o ArrayList sabe automaticamente qual a próxima posição livre, e ele é inserido - simples. Iteração também é algo tranquilo de se fazer em um array.

Negativos:

1 - temos que a sua capacidade é limitada ao seu tamanho no momento da criação, ou seja, uma vez que sua capacidade acaba, é necessária a criação de um novo array, com capacidade maior, e copiar os elementos daquele para este armazenamento.

2 - se quisermos remover um elemento, o array não permitirá que existam "buracos" em sua lista e, sendo assim, moverá todas as referências de modo que todos os índices serão modificados. Para esse tipo de operação, o ArrayList não é tão eficiente.

	Sendo assim se usa ArrayList para:

Se o objetivo for simplesmente adicionar elementos, para depois fazer a iteração, o ArrayList é sem dúvida o mais indicado. É esse o tipo mais comum de situação e, normalmente, o uso mais comum. Contudo, é necessário sabermos destas ressalvas.

A alternativa para o ArrayList é o LinkedList:

		LinkedList

1 - Ele não utiliza um array internamente.

2 - Isso significa que, quando falamos de List nem sempre estamos lidando com arrays. Uma lista significa, simplesmente, que estamos armazenando elementos em sequência, ou seja, o primeiro elemento adicionado também é o primeiro que será retornado. Além disso, temos um índice, e métodos que trabalham com ele. Por exemplo, o método get(), que podemos utilizar para obter determinado elemento de uma posição em particular.

3 - No LinkedList temos estas mesmas características, sequência, ordem de inserção e índice. Entretanto, ela não funciona com um array internamente.

4 - lista duplamente encadeada: Seu funcionamento ocorre da seguinte forma: ao adicionarmos, por exemplo, cc1 e, em seguida, cc2, ela se lembrará do elemento que foi adicionado anteriormente, ou seja, cc2 se lembra de cc1, cc3 de cc2, e assim por diante. Da mesma forma, o primeiro elemento se lembra daquele que o segue, ou seja, cc1 lembra de cc2, cc2 de cc3, e assim sucessivamente.
Sabemos que estamos no final da lista quando atingimos um elemento que não possui um próximo.

5 - Neste tipo de lista, apagar um elemento não causa grande impacto à ela como um todo, ela o descarta e substitui com o seguinte e o anterior. Supondo que temos cc1, cc2 e cc3, ao apagarmos cc2, simplesmente cc1 e cc3 passarão a ser diretamente conectados.

6 - utilizando a LinkedList em nossa classe TesteArrayListEquals. Isso será complicado, uma vez que há duplicidade de diversos métodos, como add(), contains(), size(), remove() e equals().

Ponto Negativo:

7 - Mas e se quisermos acessar o último elemento da lista, como podemos acessá-lo? Temos que iniciar no primeiro elemento, e verifica-los sucessivamente, até atingirmos o ponto onde não há mais continuidade. Diferentemente do array, não temos como acessar uma determinada posição diretamente. Se quisermos, por exemplo, acessar a posição 3, temos que iniciar na primeira e seguir, até atingirmos a desejada. Isso faz com que a iteração seja algo negativo na LinkedList.


	
	Introdução ao GENERICS < >

Os generics entraram na versão 1.5 na plataforma Java e foram levemente melhorados no Java 1.7. 

Como não misturar Classes e guardar um só tipo referências, exemplo: conta, cliente etc, exemplo:

ArrayList <Conta> lista = new ArrayList<Conta>();

< > = chamado de GENERICS

Antes de especificar o tipo de dados guardados pelo array, o for para saber as contas salvas é esse:

for(Object oRef : lista) { 
            System.out.println(oRef);
}

Após especificar o tipo de dados que o Array vai guardar o for precisa mudar para o console exibir as contas dentro do ArrayList:


for(Conta conta : lista) { 
            System.out.println(conta);
}

Agora ele não vai exibir todos os dados salvos (Object) independente da classe, exemplo Cliente, Conta etc, mas só os dados salvos no ArrayList da Conta.


Código legado


ArrayList lista = new ArrayList();
Cliente cliente = new Cliente();
lista.add(cliente);

Nova forma de fazer: 

		ArrayList<Cliente> lista = new ArrayList<Cliente>();

Atualização do java.1.7:

parametrizamos a ArrayList usando <>. Há uma variação/simplificação que entrou no Java 1.7. O código abaixo é equivalente a alternativa:

			ArrayList<Cliente> lista = new ArrayList<>();

Beneficios de usar o Generics < > 

1 - Antecipar problemas de casts no momento de compilação. Antecipar problemas de casts no momento de compilação:
		ArrayList<String> lista = new ArrayList<String>(); 
		lista.add("Nico");
		Conta c = lista.get(0); //nao compila
//erro pois tem erro no tipo: .add e não .get

2 - Evitar casts excessivos. Uma vez parametrizada a lista, não precisamos mais o cast

		Cliente ref = (Cliente) lista.get(0); // desnecessário com generics

3 - O código mais legível, já que fica explícito o tipo dos elementos. Na criação da lista fica claro qual a intenção. Por exemplo, na declaração abaixo está bem claro que a lista guarda Strings:

		ArrayList<String> nomes = new ArrayList<String>(); 

4 - Em geral, o compilador Java não otimiza o código. Isso é a tarefa da JVM. Os generics ajudam na hora de escrever o código, na hora de rodar não há impacto.


OUTRAS FORMAS DE INICIALIZAÇÃO

		Lista com capacidade predefinida

ArrayList é um array dinâmico, ou seja, por baixo dos panos é usado um array, mas sem se preocupar com os detalhes e limitações.

Agora pense que você precisa criar uma lista representando todos os 26 estados do Brasil. Você gostaria de usar um ArrayList para "fugir" do array, mas sabe que o ArrayList cria um array automaticamente, do tamanho que a classe acha conveniente.

Será que não há uma forma de criar essa lista já definindo o tamanho do array? Claro que tem e é muito simples. O construtor da classe ArrayList é sobrecarregado e possui um parâmetro que recebe a capacidade:

		ArrayList lista = new ArrayList(26); //capacidade inicial

ArrayList lista = new ArrayList(26); //capacidade inicial

		Lista a partir de outra

Outra forma de inicializar uma lista é baseado na outra que é muito comum no dia a dia. Para tal a ArrayList possui mais um construtor que recebe a lista base:

ArrayList lista = new ArrayList(26); //capacidade inicial
lista.add("RJ");
lista.add("SP");
//outros estados
ArrayList nova = new ArrayList(lista); //criando baseado na primeira lista

RESUMO

Nessa aula começamos a falar sobre lista e conhecemos a classe java.util.ArrayList. Aprendemos:

# que a classe java.util.ArrayList encapsula o uso do array e oferece vários métodos de mais alto nível

# que uma lista guarda referencias

# como usar métodos size, get, remove

# como usar a sintaxe foreach para iterar a ArrayList

# que os generics parametrizam classes

# que no caso da ArrayList podemos definir o tipo dos elementos através de generics

		Método equals()

O método equals, junto aos métodos toString e hashCode, é um dos métodos fundamentais da classe Object.

Sintaxe: 			public boolean equals(Object ref)

 é publico, devolve boolean e recebe um Object.

Sobre o equals( ) :

1 - É definido na classe Object.

2 - A implementação padrão compara as referências. A implementação do método equals da classe Object compara apenas as referências.

3 - Devemos devolver false quando os objetos não forem iguais.

4 - Devemos sobrescrever para definir o critério de igualdade. Devemos sobrescrever o método equals para definir a igualdade do objeto.
Em geral, os métodos equals, toString e hashCode existem para sobrescrita.


	SOBRE LISTAS

1 - Todas as listas garantem a ordem de inserção. As listas garantem a ordem de inserção. Isso significa que ao iterar recebemos os elementos na mesma ordem que eles foram inseridos.

2 - List é uma interface, a ArrayList e a LinkedList são implementações

3 - Todas as listas possuem um índice. as listas sempre possuem um índice (podemos acessar o elemento através da posição).
Além disso, existe mais uma característica: lista aceitam elementos duplicados, mas sobre isso falaremos um pouco mais na frente.

4 - É possível definir um tipo em uma lista, ela sempre aceita qualquer objeto. Para tal existem os Generics ().

	TODAS AS LISTAS POSSUEM UM ÍNDICE

LinkedList e ArrayList são duas implementações diferentes da interface List. A LinkedList é uma lista duplamente "linkada" e a ArrayList representa um array com redimensionamento dinâmico.

Cada uma das implementações tem as suas vantagens e desvantagens (na dúvida escolha ArrayList). Relacione as características as implementações:

ArrayList:

Positivo:
A) acesso fácil e performático pelo índice.

Negativo:
C) elementos precisam ser copiados quando não há mais capacidade.

LinkedList:

Positivo:
B) inserção e remoção performática em qualquer posição, também no início.

Negativo:
D) acesso mais demorado pelo índice, é preciso pesquisar os elementos;

RESUMO 

# como implementar o método equals para definir a igualdade;

# que o método equals é utilizado pelas listas;

# que existe mais uma lista, a java.util.LinkedList;

# a diferença entre ArrayList e LinkedList;

# a interface java.util.List que define os métodos da lista;

VECTOR E A INTERFACE COLLECTION

	A alternativa  threadsafe

VECTOR: java.util.Vector

Juntamente com o java.util.ArrayList o java.util.Vector são as PRINCIPAIS implementações da interface java.util.List.

O Vector é igual a um ArrayList. Internamente, ele também utiliza um Array. O Java nasceu de um Vector e, posteriomente, as demais implementações foram adicionadas. 

O vector te uma diferença importante do ArrayList: thread safe.

Qualquer programa em Java inicia com um método main, que forma uma "pilha" e, a partir dele, podemos ter uma nova "pilha". Dessa forma, elas podem ser executadas em paralelo. O Java permite a criação de inúmeros métodos main.

Quando temos esse tipo de situação, e desejamos que as execuções sejam feitas em paralelo, em cima de uma mesma lista, utilizamos o java.util.Vector. Este tipo de operação só funciona dessa forma, o ArrayList e o LinkedList não servem.

Apesar disso, o Vector é utilizado como exceção. As ocasiões em que ele é necessário são raras, ou seja, é difícil termos situações como a citada acima, onde são compartilhadas entre duas ou mais "pilhas" uma mesma lista.


Mas e se usássemos o Vector como uma medida preventiva? Caso ele fosse ser necessário futuramente? Isso também não funcionaria, já que a utilização dele, em si, tem um custo em desempenho. Assim, *se não for estritamente necessário*, é melhor utilizar outros tipos de lista, como o ArrayList, que é mais eficiente.

	List<Conta> lista = new Vector<Conta>();//thread safe

A interface List permanece inalterada, mas estamos utilizando a nova classe Vector, que é aquilo que chamamos de thread safe. Neste curso, a thread safety não é algo estritamente necessário, isso porque não estamos trabalhando com mais de um método main, ou "pilhas", como chamamos.

Com isso, temos três opções de listas disponíveis para uso: LinkedList, ArrayList, ou Vector. Por mais que troquemos a implementação, o corpo do código permanece o mesmo, e funciona com qualquer um dos três tipos, graças ao polimorfismo. 

Java pode criar várias pilhas e trabalharem em cima da mesma lista ao mesmo tempo em paralelo: Vector


Sobre o Vector:

1 - Vector é threadsafe. Esta é a grande diferença entre ArrayList e Vector

2 - Vector também usa um array. Como o ArrayList, o Vector também usa um array por baixo.

3 - Vector é uma lista. Vector é uma lista.

4 -  o Vector é um ArrayList threadsafe.

	A interface Collection

ArrayList, o Vector - que possui o thread safe, e o LinkedList, que é totalmente encadeada. O que todos eles têm em comum é que são listas, e que aceitam duplicados. Isso significa que, se uma referência já foi adicionada, ela é aceita novamente pela lista. É possível adicionarmos a mesma referência diversas vezes, em uma mesma lista.

Neste ponto, temos um aspecto que nem sempre é desejado, nem sempre queremos ter elementos duplicados em nossas listas. Por exemplo, em uma lista de contas bancárias, não tem muito sentido haver o registro duplicado de determinado elemento. Neste contexto de negócio, não queremos que isto aconteça.

	java.util.Set e java.util.HashSet: método hashCpde( )


verificar se determinado elemento já é presente para, somente então, termos segurança para adicioná-lo. Por este motivo, existe um outro mundo de conjuntos, que inclui o java.util.Set e java.util.HashSet. Para entendê-los melhor, é necessário conhecer o método hashCode().

Não se trata de sequências, os sets espalham seus elementos com base no hashCode().

Set não aceita elementos duplicados e que, por padrão, não é uma sequência. Entretanto, Tanto as listas quanto os sets compartilham um elemento em comum, que são as coleções do java.util.Collection. Elas podem ser tanto listas, quanto um conjunto de sets.

*Há uma interface mãe, da List e da Set, que é a Collection.*

	Collection: interface mãe do ArrayList e Set

Ao criarmos um ArrayList, podemos utilizar uma interface ainda mais genérica. Se observarmos o código da própria interface List, veremos que ela estende Collection. Por isso, se ela é capaz de implementar List, consequentemente, ela pode fazer o mesmo com a interface Collection.

get() = que trabalha com a ideia de índices. Os índices são aplicáveis somente ao conceito de listas e, apesar de o Collection contemplar tanto elas quanto sets, ao generalizarmos, não será possível utilizarmos este tipo de métodos, já que os índices não existem para o universo dos sets.

	SINTEXA DA COLLECTION:

Collection <Conta> lista = new ArrayList<Conta>( );

DOMINE AS LISTAS

1 - As listas aceitam elementos duplicados.

2 - As listas garantem a ordem de inserção. Na iteração os elementos aparecem na ordem de inserção.

3 - As listas são sequências (têm índice). Todas as listas possuem um índice, ou seja são sequências.

4 - As listas são coleções. Qualquer lista também é uma coleção (java.util.Collection).

	Sobre Coleções

Collection = java.util.Collection é a interface mãe de todas as coleções.

List = java.util.List é a interface mãe de todas as listas.

RESUMO

# o java.util.Vector, que é uma ArrayList thread safe;

# a interface java.util.Collection que é a interface de todas as coleções;

# as listas são sequencias que aceitam elementos duplicados;

# os conjuntos (java.util.Set) também são coleções, mas não aceitam duplicados nem são listas;

	AS CLASSES WRAPPERS














