O PACOTE JAVA.LANG - CLASSES OBJECT E STRING

STRING

String e System são classes. Falamos anteriormente que todas as classes estão dentro de um pacote, mas como lidamos com essas duas? Devemos utiliza-las a partir de um import, como com todas as outras classes, certo?

As classes String e System estão, sim, dentro de um pacote, mas não é necessário importa-las. O único pacote que não necessita ser importado é java.lang. Por ser de suma importância para o desenvolvimento de qualquer aplicação Java, ele é incluído automaticamente.

1 - As classes String e System vem desse pacote.
2 - Não precisa do import, é automaticamente importado.
3 - Possui classes essenciais para qualquer programa.

Quando falamos sobre exceções já vimos várias classes como Exception, RuntimeException, NullPointerException ou ArithmeticException.

Todas essas classes vem do pacote java.lang e por isso não era preciso importá-las.

CLASSE STRING E A IMUTABILIDADE

Strings também são objetos. No entanto, não é preciso utilizar o new para criar este objeto. Isso ocorre para facilitar a vida do desenvolvedor, não precisamos utilizar o *new* todas as vezes que formos trabalhar com Strings, mas nada impede que você o faça. Portanto, as duas formas são funcionais, embora o *segundo caso* seja considerado uma má prática. A partir da primeira forma a máquina virtual consegue executar algumas otimizações, o que é impossível no segundo caso.

 Criação de objetos usando a classe String 

1º Caso: Objeto Literal

String nome = "Alura"; 
Classe referência = objeto

2º Caso:

String outro = new String("Alura");

Chamamos essa sintaxe de *objeto literal*. Na sintaxe não há diferença entre inicializar um inteiro(int) e uma String. nome é uma referência, então nada nos impede de executar métodos em cima dela. 

CONCEITO FUNDAMENTAL DA STRING:

 String nome = "Alura";

Uma vez que foi criada, ela não poderá ser modificada posteriormente. Chamamos o conceito de um objeto não poder ser alterado de IMUTABILIDADE. 
Caso você queira alterar algo em uma String, você terá de criar uma String que refletirá uma nova ação, ou seja, teremos dois objetos, como duas "Aluras", sendo uma com "A" e outra com "a".

Se quisermos imprimir alura, deveremos criar uma String que chamaremos de outra, e que apontará para o objeto de nosso interesse.


public String replace(char oldChar, char newChar) = replace() retorna uma String.


String outra = nome.replace("A", "a");

Na verdade, temos duas String na memória, sendo uma nome que aponta para o objeto Alura e a String outra que aponta para um novo objeto, no caso, alura.

Todos os métodos funcionam nessa linha: devolvem uma nova String, respeitando o conceito de imutabilidade. Esse é um conceito importante e algumas classes do nosso projeto seguem essa ideia.

Nem todas classes são imutáveis, a nossa classe Conta não é imutável, afinal a ideia de uma conta é necessariamente dinâmica, o saldo de uma conta está sempre em movimento e transformação.

SOBRE STRING:

1 - É uma classe definida em java.lang e por isso não há a necessidade de importar. Pois a classe String realmente é do pacote java.lang. O FQN é java.lang.String

2 - Um objeto do tipo String não pode ser alterado. Objetos da classe String são imutáveis. Isso significa que, uma vez criado, não pode ser alterado, por isso qualquer alteração cria um novo objeto String.

3 - Pode ser criada tanto usando new quanto aspas duplas e há diferenças em relação a isso. Pois existe sim uma diferença entre a criação com new e a criação com aspas duplas. Usar aspas duplas é boa prática pois a JVM pode executar várias otimizações por baixo dos panos.

4 - Serve para definirmos textos e não precisa ser criadas usando a palavra new, pois Strings podem e devem ser criados usando aspas duplas, como boas práticas:
		String nome = "alura";

MÉTODOS DA CLASSE STRING


Sobrecarga:

	Existem duas versões do método replace(), e os dois variam nos parâmetros, ambos recebem dois, mas os tipos são diferentes. O conceito de métodos que variam nos tipos de parâmetros é chamado de sobrecarga, muito comum no mundo Java.
	
replace() = recebe CharSequence e outro um char; o primeiro está relacionado a conversão de um conjunto de caracteres. Método replace não altera a String original e sim devolve uma nova String.

			String outra = nome.replace("Al", "aL");

A outra opção altera apenas um caractere. É importante lembrar que no mundo Java um único caractere é acompanhado de aspas simples.

			String outra = nome.replace('A', 'a');

Esse tipo é chamado char, ou seja, uma String que contém apenas um caractere. Observem um exemplo ainda mais claro:

			char c = 'A'
			char d = 'a'

			String outra = nome.replace(c,d);

+ charAt( ) = saber qual é o caractere que ocupa uma posição específica.

String nome = "Alura";

char c = nome.charAt(2);

System.out.println(c); // u

Percebam que o resultado impresso foi a letra u, o que pode parecer um pouco estranho, uma vez que a segunda letra da String Alura seria l. Por que isso ocorreu? O Java, como quase todas as linguagens, trabalha com o numeral inicial "0".

A = 0
L = 1
U = 2
R = 3
A = 4

+ indexOf( ) = Esse método possui muitas variantes, recebendo diferentes parâmetros. Usaremos o método que recebe uma String. Para o método podemos passar uma sequencia de caracteres, passaremos ur. Assim feito, podemos perguntar qual é a posição dessa String dentro de Alura.

String nome = "Alura";

int pos = nome.indexOf("ur");

System.out.println(pos); // 2

O método indexOf() opera de forma inversa ao charAt(), uma vez que aquele com base no caractere exibe sua posição, e este utiliza a posição para exibir o caractere.

+ substring() = Existe um método que possibilita a criação de uma sub-String. Este método possui duas sobrecargas. A primeira informação que vamos fornecer é a partir de que posição iniciamos a contagem; colocaremos 1.

String nome = "Alura";

String sub = nome.substring(1);

System.out.println(sub); // lura

+length( ) = Saber qual é o tamanho de uma determinada String.

String nome = "Alura";

System.out.println(nome.length()); // 5

Com isso, podemos criar um laço, iniciando por 0, e imprimirmos caractere por caractere utilizando o método charAt().

String nome = "Alura";
System.out.println(nome.length());

for(int i = 0; i < nome.length(); i++) {
    System.out.println(nome.charAt(i));
}

Resultado:

5
A
l
u
r
a

+ isEmpty() = perguntar se a String está vazia. Recebe um retorno booleano (true e false);
Para testarmos esse método criaremos uma Stringvazia; lembrando que esse objeto existe, apenas não possui nenhum caractere, em uma situação real para exemplificarmos: umaString` vazia pode representar um campo de formulário que não foi preenchido pelo usuário.

String vazio = "";

System.out.println(vazio.isEmpty()); // true

Se inserirmos um espaço na String, do ponto de vista do Java, não teremos mais uma String vazia, e o resultado será false.

+ trim() = método para anular todos os espaços em uma String. 
ele devolve uma nova apresentação, que chamaremos de outroVazio.

String vazio =" ";
String outroVazio = vazio.trim(); 

System.out.println(outroVazio.isEmpty()); // true 

Removemos todos os espaços e temos efetivamente uma String vazia.

Para deixarmos mais claro como o método trim() opera, iremos escrever Alura em String vazio e adiconaremos muitos espaços extras, tanto no começo como ao final da palavra.

String vazio ="    Alura    ";
String outroVazio = vazio.trim(); 

System.out.println(outroVazio); alura

- no canto do console sem os espaçamentos na String vazio.

+ contains( ) = Este método verifica se uma String possui uma sub-String. Perguntaremos se a String vazio possui uma sub-String Alu. Devolve um valor booleano.

String vazio ="    Alura    ";
String outroVazio = vazio.trim(); 

System.out.println(vazio.contains("Alu")); // true

§ INTERFACE de CharSequence 

O tipo CharSequence é uma interface que a própria classe String implementa (pois uma String é uma sequência de caracteres!):

public class String implements CharSequence {}

Quando usamos a classe String até poderíamos declarar a variável com o tipo da interface, mas isso é raro de se ver:

CharSequence seq = "é uma sequencia de caracteres";

Interessante é que existem outras classes que também implementam a interface CharSequence. Em outras palavras, existem outras classes que são sequências de caracteres além da classe String.

+ StringBuilder = Ajuda na concatenção de Strings.

classe String é especial pois gera objetos imutáveis. Isso é considerado benéfico pensando no design mas é ruim pensando no desempenho (e por isso devemos usar aspas duplas na criação, pois a JVM quer contornar os problemas no desempenho com otimizações). 

Agora vem um problema: imagina que você precisa criar um texto enorme e precisa concatenar muitas String.

String texto = "Socorram";
texto = texto.concat("-");
texto = texto.concat("me");
texto = texto.concat(", ");
texto = texto.concat("subi ");
texto = texto.concat("no ");
texto = texto.concat("ônibus ");
texto = texto.concat("em ");
texto = texto.concat("Marrocos");
System.out.println(texto); 

Nesse pequeno exemplo já criamos vários objetos, só porque estamos concatenando algumas Strings. Isso é nada bom pensando no desempenho e para resolver isso existe a classe StringBuilder que ajuda na concatenação de Strings de forma mais eficiente.

StringBuilder builder = new StringBuilder("Socorram");

builder.append("-");
builder.append("me");
builder.append(", ");
builder.append("subi ");
builder.append("no ");
builder.append("ônibus ");
builder.append("em ");
builder.append("Marrocos");
String texto = builder.toString();

System.out.println(texto);

O StringBuilder é uma classe comum. Repare que usamos o new para a criação do objeto. Além disso, como o objeto é mutável, utilizamos a mesma referência, sem novas atribuições.

A INTERFACE CharSequence

Agora o legal é que a classe StringBuilder também implementa a interface CharSequence:

public class StringBuilder implements CharSequence {

CharSequence cs = new StringBuilder("também é uma sequencia de caracteres");

 }


Isso faz que alguns métodos da classe String saibam trabalhar com o StringBuilder, por exemplo:

String nome = "ALURA";
CharSequence cs = new StringBuilder("al");

nome = nome.replace("AL", cs);

System.out.println(nome);

Vice-versa a classe StringBuilder tem métodos que recebem o tipo CharSequence. Dessa forma podemos trabalhar de maneira compatível com as duas classes, baseado numa interface comum.

SOBRE STRING NO GERAL:

1 - o package java.lang é o único pacote que não precisa ser importado.

2 - nele tem classes fundamentais que qualquer aplicação precisa, como a classe String e System.

3 - objetos da classe String são imutáveis e usamos uma sintaxe literal para criar (object literal).

4 - qualquer método de alteração da classe String devolve uma nova String que representa a alteração.

5 - a classe String é uma CharSequence.

6 - se precisamos concatenar muitos String devemos usar a classe StringBuilder.

7 - vimos vários métodos da classe String como trim, charAt, contains, isEmpty, length, indexOf, replace.


-------------------------  A CLASSE OBJECT---------------------------------------

ANALISANDOU O SOUT - System.out.println( );

O que é? 
Visibilidade? Acesso?
Pacote?

			System.out.println("Alura");

classes no java começa maiúsculo;

método sempre tem parenteses;

Uma referência  que aponta para um objeto: Conta conta = new Conta ();

Tipo Primitivo - Nas aulas anteriores aprendemos que uma variável que representa um primitivo não pode conter pontos, pois um primitivo é apenas um valor que não possui um método associado a ele, pois não é baseado em um classe.

Método não possui acesso estático.

Não confundam sobrecarga com sobrescrita, esta última é relacionada à herança, possui a mesma assinatura e não pode variar nos parâmetros. Sobrecarga: são várias versões do mesmo método.

Static são chamados a partir de uma referência:
		Conta c = new Conta ( ); // Classe referencia um objeto para cria-lo
		c.deposito(222); 

System. :
	- classe, java.lang, acesso public;

.out:
	- atributo, acesso public, referência (não sabe o tipo da referência), static.
 
No caso, o out é acessado por meio de uma classe, a System. O que significa que há um static dentro da classe System, ou seja, temos um public static, mas ainda não sabemos o tipo da referência.

println( ); :
	- método, público, não static, sobrecarga, não joga exceções do tipo checked

println(): ele pode receber uma String, mas também um int. Aparentemente, exitem várias versões de um mesmo método, ou seja, muitas sobrecargas.

Funciona com vários tipos de váriáveis como String, Int, Double;

nunca preciso fazer um tratamento de excesão no println.

			CASES

1)

Conta c = new Conta();
c.CAIXA.getCodigo();

CAIXA é:

1 - CAIXA é um atributo da instância: CAIXA é uma atributo da instância, pois usamos a referência c para acessar o atributo. Se fosse estático a chamada seria:
			Conta.CAIXA.getCodigo();

2 - CAIXA é uma referência: pois estamos usando o . para chamar o método getCodigo(). Se CAIXA fosso um primitivo não seria possível chamar um método.

3 - CAIXA tem visibilidade pública: pois no enunciado diz que estamos importando as classes corretamente. Isso significa que a classe Conta está dentro de um outro package.

2)

boolean existe1 = Banco.existeBanco("CAIXA");
boolean existe2 = Banco.existeBanco(394);

1 - existeBanco tem acesso estático: pois usamos a classe Banco para chamar;

2 - existeBanco é um método: as parênteses deixam claro que se trata de um método.

3 - existeBanco é uma forma de sobrecarga: xistem duas versões desse método que variam nos parâmetros, a primeira recebe uma String e a segunda recebe uma valor int.

USANDO A CLASSE OBJECT

Queremos fazer uma classe mãe que é estendida por todas essas classes que estão no primeiro nível; lembre-se que em Java só podemos estender uma classe.Todas as classes se extendem para uma classe mãe: Object. 

Ele é extends automaticamente pelo Java.

Object é o topo de todas as classes. Reutilização de código e polimorfismo. É a referência mais génerica que tem.

HERANÇA:

Herança possui duas características: reutilização de código e polimorfismo. A classe Object no topo da hierarquia, isso significa que também são herdados métodos dessa classe, ou seja, reutilização.

	- Polimorfismo

Para ilustrarmos melhor essa ideia, podemos expressar nosso código de Teste da seguinte maneira: substituindo ContaCorrente, ContaPoupanca e Cliente por Object.

Esse é um bom exemplo de polimorfismo, temos uma referência genérica que se liga a um objeto mais específico. Podemos utilizar tanto a referência mais específica quanto a mais genérica para designar ContaCorrete, ContaPoupanca e Cliente.

	- Reutilização de código

x
3
br.com.bytebank.banco.modelo.ContaCorrente@3abfe836
br.com.bytebank.banco.modelo.ContaPoupanca@2ff5659e


Observem que foi impresso o nome da classe em seu full qualified name, mais @3abfe836. De onde vem esse código e quem o implementou? A classe Object; essa classe possui alguma funcionalidade que resulta na produção dessa String.

Essa funcionalidade é um método, afinal, dentro da funcionalidade existe um método encapsulado. Esse método é chamado toString(), e ele foi herdado de Object.

A classe Object é a classe RAIZ do Java:

1 -  Não é preciso deixar explícito na declaração de uma classe que ela deve herdar de Object, porque isso é automático. Não é preciso herda do Object explicitamente, o compilador automaticamente insere a declaração.

2 - Qualquer objeto pode ser referenciado pelo tipo Object, já que ela é a principal. O tipo Object é a forma mais genérica de referenciar um objeto.

3 - Na herança você sempre herda o comportamento de todas classes na hierarquia. Se o Gerente herda do Funcionario e Funcionario herda do Objeto, ambos Gerente e Funcionario são objetos e herdam as funcionalidades da classe Object.

4 - Object possui sim métodos e mesmo sem essa classe o Java seria uma linguagem orientada a objetos.

O MÉTODO toString( );

1 - O método toString() existe para ser sobrescrito. É boa prática sobrescrever o método para dar um significado maior do que a saída padrão desse método.

2 - O método toString() existe para devolver uma informação sobre o estado do objeto. o método toString deve devolver informações sobre o estado do objeto. É útil para a depuração no desenvolvimento.

3 - Não sabemos o endereço do objeto através do toString() (essa informação também não ajudaria em nada).

REVISÃO E CONCLUSÃO

1 - Todas as classes trabalham com a regra de que a classe Object está no topo da hierarquia, sendo esta a classe mãe. Não é necessário escrever extends Object nas classes filhas como Cliente, pois o compilador insere essa informação automaticamente.

2 - A classe Object foi inventada a partir do conceito de que de que tudo é um objeto. Com isso, conseguimos algumas vantagens relacionadas à 
herança, 
como polimorfismo e
 reutilização de código.

3 - Nós vimos apenas um método, mas existem muitos outros que dependem da classe Object, vários laços foram escritos de forma dependente dessa classe, pois são utilizados alguns métodos básicos que já foram implementados dentro dessa classe, então todos as classes associadas à Object terão a mesma funcionalidade. O exemplo que utilizamos no curso foi o método println(), que como podemos observar na classe Teste, funciona com qualquer tipo de referência, afinal todas são compatíveis com a classe Object.

4 - Não é possível fazer muita coisa com o Object, por exemplo, na classe Teste escreveremos cc, que é uma referência do tipo Object, e chama alguns outros métodos genéricos, como toString().

5 - valueOf() verificaremos que ele também é dependente de Object, o tipo mais genérico o possível. Ao longo do código existe um operador ternário - que é basicamente um if mais enxuto - que verifica se o objeto é nulo, caso sim, é devolvido null como String, se não (essa condicional é representada pelos dois pontos :) é devolvido obj.toString().

			public static String valueOf(Object obj) {
  				  return (obj == null ) ? "null" : obj.toString();
				}
6 - toString() da classe Object é ser sobrescrito, assim como a maioria dos outros métodos "querem" ser sobrescritos pelos filhos, com isso eles ganham mais significado. É o que fizemos na classe Conta, para procurarmos rapidamente o método, acionamos o atalho "Ctrl + O" e o procuramos dentro da classe e observamos a atribuição de significado.

7 -  existe um universo com muitas classes que que se baseiam em métodos definidos na classe Object, e o desenvolvedor deve sobrescrever tais métodos para atribuir maior significado a eles. Analisamos o método println() que internamente chama toString(), mais genérico do que, por exemplo, o java.lang.

8 - Existem no mínimo dois pacotes super importantes que veremos nos próximos cursos, como java.util, em que encontraremos as coleções, conjuntos e mapas. Teremos, ainda, o java.io, que contém as classes que se preocupam com a leitura e escrita de dados, streams, readers e writers.

9 -  dominar a classe Object para conseguirmos trabalhar, principalmente, com o java.util e conhecermos outros métodos como hashCode() e equals() que deverão ser sobrescritos.





 









